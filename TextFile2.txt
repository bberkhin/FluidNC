1. parser_block_t - результат парсинга G code =>

2.  plan_line_data_t  ;// Planner data prototype. Must be used when passing new motions to the planner.
    float        feed_rate;      // Desired feed rate for line motion. Value is ignored, if rapid motion.
    PlMotion     motion;         // Bitflag variable to indicate motion conditions. See defines above.
    bool         is_jog;         // true if this was generated due to a jog command

3 mc_move_motors(float* target, plan_line_data_t* pl_data) 
// Execute linear motor motion in absolute millimeter coordinates. Feed rate given in
// millimeters/second unless invert_feed_rate is true.
// Then the feed_rate means that the motion should be completed in (1 minute)/feed_rate time.

// ∆дет пока осовободитс€ место в буфере 
   static plan_block_t block_buffer[BLOCK_BUFFER_SIZE];  // A ring buffer for motion instructions
   static uint8_t      block_buffer_tail;                // Index of the block to process now
   while (plan_check_full_buffer()) {
        protocol_auto_cycle_start();
  и когда освободитс€ запускает
   plan_buffer_line(target, pl_data); который
       // Prepare and initialize new block. plan_block_t


4/ запуск 
   sys.state = State::Jog;
   Stepper::prep_buffer();
   Stepper::wake_up();  // NOTE: Manual start. No state machine required.
   
   Stepper::prep_buffer();
   //The segment buffer is an intermediary buffer interface between the execution of steps
   The segment buffer is an intermediary buffer interface between the execution of steps
   by the stepper algorithm and the velocity profiles generated by the planner. The stepper
   algorithm only executes steps within the segment buffer and is filled by the main program
   when steps are "checked-out" from the first block in the planner buffer. This keeps the
   step execution and planning optimization processes atomic and protected from each other.
   The number of steps "checked-out" from the planner buffer and the number of segments in
   the segment buffer is sized and computed such that no operation in the main program takes
   longer than the time it takes the stepper algorithm to empty it before refilling it.
   Currently, the segment buffer conservatively holds roughly up to 40-50 msec of steps.
   NOTE: Computation units are in steps, millimeters, and minutes.
